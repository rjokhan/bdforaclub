const RESIDENTS_API = "/api/residents/";
const PARTICIPANTS_API = "/api/participants/";
const EVENTS_API = "/api/events/";

let selectedEventId = null;
let allResidents = [];
let selectedResidents = [];
let existingParticipantIds = [];

// üëâ –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–ø–∞–ø–∞
function openPurchasePopup() {
    const popup = document.getElementById("purchase-popup-overlay");
    popup.classList.remove("hidden");

    fetch(EVENTS_API)
        .then(res => res.json())
        .then(events => {
            const container = document.getElementById("event-list-container");
            container.innerHTML = "";

            events.forEach(event => {
                const div = document.createElement("div");
                div.textContent = `${event.title} (${event.date})`;
                div.style.cursor = "pointer";
                div.onclick = () => {
                    selectedEventId = event.id;
                    document.getElementById("purchase-step-event").style.display = "none";
                    document.getElementById("purchase-step-residents").style.display = "block";
                    loadResidentsAndParticipants();
                };
                container.appendChild(div);
            });
        })
        .catch(() => alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–±—ã—Ç–∏–π"));
}

// üëâ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–ø–∞–ø–∞
function closePurchasePopup() {
    const popup = document.getElementById("purchase-popup-overlay");
    popup.classList.add("hidden");

    // –°–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë
    selectedEventId = null;
    selectedResidents = [];
    existingParticipantIds = [];

    document.getElementById("purchase-step-event").style.display = "block";
    document.getElementById("purchase-step-residents").style.display = "none";
    document.getElementById("selected-residents-list").innerHTML = "";
    document.getElementById("resident-search-input").value = "";
    document.getElementById("resident-search-results").innerHTML = "";
    document.getElementById("save-purchase-button").classList.add("hidden");
}

// üëâ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–≤–µ–Ω—Ç–∞
function loadResidentsAndParticipants() {
    Promise.all([
        fetch(RESIDENTS_API).then(res => res.json()),
        fetch(PARTICIPANTS_API).then(res => res.json())
    ])
    .then(([residents, participants]) => {
        allResidents = residents;
        existingParticipantIds = participants
            .filter(p => p.event === selectedEventId)
            .map(p => p.resident);
    })
    .catch(() => alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤ –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"));
}

// üëâ –ü–æ–∏—Å–∫ —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤
function searchResidents() {
    const input = document.getElementById("resident-search-input").value.toLowerCase();
    const container = document.getElementById("resident-search-results");
    container.innerHTML = "";

    const results = allResidents.filter(r =>
        (r.full_name?.toLowerCase().includes(input) || r.phone?.includes(input)) &&
        !selectedResidents.find(sr => sr.id === r.id) &&
        !existingParticipantIds.includes(r.id)
    );

    if (results.length === 0) {
        container.innerHTML = "<p>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.</p>";
        return;
    }

    results.forEach(resident => {
        const div = document.createElement("div");
        div.className = "new-selected-resident";

        const label = document.createElement("span");
        label.textContent = `${resident.full_name} (${resident.phone})`;

        const btn = document.createElement("button");
        btn.textContent = "‚ûï";
        btn.onclick = () => {
            selectedResidents.push({ ...resident, status: null });
            renderSelectedResidents();
            container.innerHTML = "";
            document.getElementById("resident-search-input").value = "";
        };

        div.appendChild(label);
        div.appendChild(btn);
        container.appendChild(div);
    });
}

// üëâ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤
function renderSelectedResidents() {
    const container = document.getElementById("selected-residents-list");
    container.innerHTML = "";

    selectedResidents.forEach((r, i) => {
        const div = document.createElement("div");
        div.className = "new-selected-resident";

        const label = document.createElement("span");
        label.textContent = `${r.full_name} (${r.phone})`;

        const select = document.createElement("select");
        select.innerHTML = `
            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å</option>
            <option value="paid">–û–ø–ª–∞—á–µ–Ω–æ</option>
            <option value="reserved">–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ</option>
            <option value="partial">–û–ø–ª–∞—á–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ</option>
        `;
        select.onchange = () => {
            selectedResidents[i].status = select.value;
            checkAllStatusesSelected();
        };

        div.appendChild(label);
        div.appendChild(select);
        container.appendChild(div);
    });

    checkAllStatusesSelected();
}

// üëâ –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤—Å–µ –ª–∏ –≤—ã–±—Ä–∞–ª–∏ —Å—Ç–∞—Ç—É—Å
function checkAllStatusesSelected() {
    const allSelected = selectedResidents.length > 0 && selectedResidents.every(r => r.status);
    document.getElementById("save-purchase-button").classList.toggle("hidden", !allSelected);
}

// üëâ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫
function savePurchases() {
    const today = new Date().toISOString().split("T")[0];

    const promises = selectedResidents.map(r =>
        fetch(PARTICIPANTS_API, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                resident: r.id,
                event: selectedEventId,
                status: r.status,
                joined_at: today,
                payment:
                    r.status === "paid" ? 100000 :
                    r.status === "partial" ? 50000 : 0,
                attended: false,
                notified: false,
                came: false
            })
        })
    );

    Promise.all(promises)
        .then(responses => {
            const failed = responses.find(r => !r.ok);
            if (failed) {
                failed.json().then(data => {
                    alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: " + JSON.stringify(data));
                });
                return;
            }

            alert("–ü–æ–∫—É–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã");
            closePurchasePopup();
            if (typeof fetchEvents === "function") fetchEvents();
        })
        .catch(err => {
            console.error(err);
            alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏");
        });
}
